/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as VerifyRouteImport } from './routes/verify'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthDashboard2RouteImport } from './routes/_auth/dashboard2'
import { Route as AuthDashboardRouteImport } from './routes/_auth/dashboard'
import { Route as AuthDashboardIndexRouteImport } from './routes/_auth/dashboard/index'
import { Route as AuthDashboardBookedAppointmentsRouteImport } from './routes/_auth/dashboard/booked-appointments'
import { ServerRoute as ApiElectricTableServerRouteImport } from './routes/api/electric/$table'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const VerifyRoute = VerifyRouteImport.update({
  id: '/verify',
  path: '/verify',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthDashboard2Route = AuthDashboard2RouteImport.update({
  id: '/dashboard2',
  path: '/dashboard2',
  getParentRoute: () => AuthRoute,
} as any)
const AuthDashboardRoute = AuthDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any)
const AuthDashboardIndexRoute = AuthDashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthDashboardRoute,
} as any)
const AuthDashboardBookedAppointmentsRoute =
  AuthDashboardBookedAppointmentsRouteImport.update({
    id: '/booked-appointments',
    path: '/booked-appointments',
    getParentRoute: () => AuthDashboardRoute,
  } as any)
const ApiElectricTableServerRoute = ApiElectricTableServerRouteImport.update({
  id: '/api/electric/$table',
  path: '/api/electric/$table',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/verify': typeof VerifyRoute
  '/dashboard': typeof AuthDashboardRouteWithChildren
  '/dashboard2': typeof AuthDashboard2Route
  '/dashboard/booked-appointments': typeof AuthDashboardBookedAppointmentsRoute
  '/dashboard/': typeof AuthDashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/verify': typeof VerifyRoute
  '/dashboard2': typeof AuthDashboard2Route
  '/dashboard/booked-appointments': typeof AuthDashboardBookedAppointmentsRoute
  '/dashboard': typeof AuthDashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/verify': typeof VerifyRoute
  '/_auth/dashboard': typeof AuthDashboardRouteWithChildren
  '/_auth/dashboard2': typeof AuthDashboard2Route
  '/_auth/dashboard/booked-appointments': typeof AuthDashboardBookedAppointmentsRoute
  '/_auth/dashboard/': typeof AuthDashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/verify'
    | '/dashboard'
    | '/dashboard2'
    | '/dashboard/booked-appointments'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/verify'
    | '/dashboard2'
    | '/dashboard/booked-appointments'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/login'
    | '/verify'
    | '/_auth/dashboard'
    | '/_auth/dashboard2'
    | '/_auth/dashboard/booked-appointments'
    | '/_auth/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
  VerifyRoute: typeof VerifyRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/electric/$table': typeof ApiElectricTableServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/electric/$table': typeof ApiElectricTableServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/electric/$table': typeof ApiElectricTableServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$' | '/api/electric/$table'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$' | '/api/electric/$table'
  id: '__root__' | '/api/auth/$' | '/api/electric/$table'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiElectricTableServerRoute: typeof ApiElectricTableServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/verify': {
      id: '/verify'
      path: '/verify'
      fullPath: '/verify'
      preLoaderRoute: typeof VerifyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/dashboard2': {
      id: '/_auth/dashboard2'
      path: '/dashboard2'
      fullPath: '/dashboard2'
      preLoaderRoute: typeof AuthDashboard2RouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/dashboard/': {
      id: '/_auth/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof AuthDashboardIndexRouteImport
      parentRoute: typeof AuthDashboardRoute
    }
    '/_auth/dashboard/booked-appointments': {
      id: '/_auth/dashboard/booked-appointments'
      path: '/booked-appointments'
      fullPath: '/dashboard/booked-appointments'
      preLoaderRoute: typeof AuthDashboardBookedAppointmentsRouteImport
      parentRoute: typeof AuthDashboardRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/electric/$table': {
      id: '/api/electric/$table'
      path: '/api/electric/$table'
      fullPath: '/api/electric/$table'
      preLoaderRoute: typeof ApiElectricTableServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthDashboardRouteChildren {
  AuthDashboardBookedAppointmentsRoute: typeof AuthDashboardBookedAppointmentsRoute
  AuthDashboardIndexRoute: typeof AuthDashboardIndexRoute
}

const AuthDashboardRouteChildren: AuthDashboardRouteChildren = {
  AuthDashboardBookedAppointmentsRoute: AuthDashboardBookedAppointmentsRoute,
  AuthDashboardIndexRoute: AuthDashboardIndexRoute,
}

const AuthDashboardRouteWithChildren = AuthDashboardRoute._addFileChildren(
  AuthDashboardRouteChildren,
)

interface AuthRouteChildren {
  AuthDashboardRoute: typeof AuthDashboardRouteWithChildren
  AuthDashboard2Route: typeof AuthDashboard2Route
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthDashboardRoute: AuthDashboardRouteWithChildren,
  AuthDashboard2Route: AuthDashboard2Route,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
  VerifyRoute: VerifyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiElectricTableServerRoute: ApiElectricTableServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
